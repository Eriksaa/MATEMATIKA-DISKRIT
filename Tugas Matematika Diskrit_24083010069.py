# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K7ljMUPmCb6Gp_wtR7C7cYGJPCCwDN_4
"""

# Nama: Erik Saputra Rifki
# NPM: 24083010069

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

NPM= 69
np.random.seed(NPM)

makan =  pd.read_csv("makanan.csv")

# handling missing values
harga_rata = makan['harga'].mean()
makan['harga'] = makan['harga'].fillna(harga_rata)

budget= 1e6 #rupiah

wkenyang_base= 0.8
wrasa_base= 0.7
wsehat_base= 0.9 # simpangan lebih besar
wbosan_base= 0.2

skor_kumulatif= 0.0
SAMPLE_NUM= 500

sampleid= np.arange(0, 500)
# skor perorangan
skor= np.zeros(SAMPLE_NUM, dtype=np.double)
sisa= np.zeros(SAMPLE_NUM, dtype=np.double)
sehat= np.zeros(SAMPLE_NUM, dtype=np.double)
pilihankum= np.zeros(SAMPLE_NUM, dtype=np.double)

SISA_MININUM= 150e3
SISA_MAKSIMUM= 300e3
bin_sisa= np.arange(SISA_MININUM, SISA_MAKSIMUM, 1000)
resp_sehat= np.zeros((SAMPLE_NUM, len(bin_sisa)), dtype=np.double)
resp_pilih= np.zeros((SAMPLE_NUM, 62), dtype=np.double)

for n in range(0, SAMPLE_NUM):
    budget=1e6
    skor_kumulatif= 0
    skor_sehat= 0

    for i in range(0, 31): # hari
        # makan pertama, pilih secara acak
        pilihan= np.random.randint(0, len(makan))
        # update weight factor
        w_kenyang= np.random.normal(loc=wkenyang_base, scale=0.2)
        w_rasa= np.random.normal(loc=wrasa_base, scale=0.2)
        w_sehat= np.random.normal(loc=wsehat_base, scale=0.4)
        w_bosan= np.random.normal(loc=wbosan_base, scale=0.2)
        skor_kumulatif= skor_kumulatif + \
            w_kenyang * makan['kenyang'][pilihan]\
            + w_rasa * makan['rasa'][pilihan] \
            + w_sehat * makan['sehat'][pilihan] \
            - w_bosan * makan['bosan'][pilihan]
        skor_sehat += makan['sehat'][pilihan] - 0.5
        budget = budget - makan['harga'][pilihan]
        resp_pilih[n][2*i]= pilihan

        # makan kedua
        pilihan= np.random.randint(0, len(makan))
        # update weight factor
        w_kenyang= np.random.normal(loc=wkenyang_base, scale=0.2)
        w_rasa= np.random.normal(loc=wrasa_base, scale=0.2)
        w_sehat= np.random.normal(loc=wsehat_base+0.2, scale=0.4)
        w_bosan= np.random.normal(loc=wbosan_base*2, scale=0.2)
        skor_kumulatif= skor_kumulatif + \
            w_kenyang * makan['kenyang'][pilihan]\
            + w_rasa * makan['rasa'][pilihan] \
            + w_sehat * makan['sehat'][pilihan] \
            - w_bosan * makan['bosan'][pilihan]
        skor_sehat += makan['sehat'][pilihan] - 0.5
        budget = budget - makan['harga'][pilihan]
        resp_pilih[n][2*i+1]= pilihan

    sisa[n]= budget
    skor[n]= skor_kumulatif
    sehat[n]= skor_sehat

    resp_sehat[n][ int((budget-SISA_MININUM)/1000)]= skor_sehat

# Korelasi
corr = np.corrcoef(skor, sisa)[0,1]
print(f"Korelasi skor kumulatif vs sisa uang: {corr:.3f}")

# Histogram sisa uang
plt.figure(figsize=(8,4))
plt.hist(sisa, bins=20, color='skyblue', edgecolor='k')
plt.xlabel('Sisa Uang (Rp)')
plt.ylabel('Jumlah Simulasi')
plt.title('Distribusi Sisa Uang Bulanan')
plt.show()

#  Plot skor sehat kumulatif
fig = plt.figure(figsize=(10,6))
ax = fig.add_subplot(projection='3d')
X, Y = np.meshgrid(sampleid, bin_sisa)
surf = ax.plot_surface(X, Y, resp_sehat.T, cmap='jet_r', edgecolor='none')
fig.colorbar(surf, shrink=0.5, aspect=10, label='Skor Sehat Kumulatif')
ax.set_xlabel('Simulasi')
ax.set_ylabel('Sisa Uang (Rp)')
ax.set_zlabel('Skor Sehat Kumulatif')
ax.view_init(elev=30, azim=120)
plt.show()

# TUGAS
# (1) cari pola makan mana saja yang menghasilkan nilai kumulatif kesehatan (resp_sehat) positif
idx_sehat = np.where(sehat > 0)[0]
print("1. Simulasi dengan skor sehat positif:")
print(idx_sehat)

# (2) cari titik-titik dengan sisa uang bulanan positif dari (1)
idx_sehat_sisa = idx_sehat[sisa[idx_sehat] > 0]
print("2. Simulasi dengan skor sehat positif dan sisa uang positif:")
print(idx_sehat_sisa)

# (3) cari titik dengan skor skumulatif terbesar (skor) di mana nilai kumulatif kesehatannya positif
idx_max = idx_sehat_sisa[np.argmax(skor[idx_sehat_sisa])]
print("3. Indeks simulasi dengan skor kumulatif terbesar dan sehat positif serta sisa uang positif:")
print(idx_max)
print("- Skor kumulatif:", skor[idx_max])
print("- Skor sehat:", sehat[idx_max])
print("- Sisa uang:", sisa[idx_max])

# (4) tampikan jadwal makanan sesuai pilihan (resp_pilih)
jadwal_terbaik = resp_pilih[idx_max]
makanan_nama = makan['makanan'].values

data_harian = []
for i in range(31):  # 31 hari
    pagi_idx = int(jadwal_terbaik[2*i])
    malam_idx = int(jadwal_terbaik[2*i + 1])
    data_harian.append({
        "Hari": i+1,
        "Pagi": makanan_nama[pagi_idx],
        "Malam": makanan_nama[malam_idx]
    })

tabel_jadwal = pd.DataFrame(data_harian)
print("4. Jadwal terbaik:")
print(tabel_jadwal.to_string(index=False))

